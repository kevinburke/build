// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by makestatic via "go generate"; DO NOT EDIT.

package devapp

var Files = map[string]string{
	"templates/dash.html": `{{/*
Copyright 2017 The Go Authors. All rights reserved.
Use of this source code is governed by a BSD-style
license that can be found in the LICENSE file.
*/}}
<html>
<head>
<title>Go development dashboard</title>
<link rel="stylesheet" href="/static/dash.css" />
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="/static/dash.js"></script>
</head>
<body>

<div class="loginbar">
{{if .User}}
	logged in as {{.User}} <a href="{{.Logout}}">log out</a><br>
	show
	<a href="javascript:show('all')" class="showbar" id="show-all">all</a> |
	<a href="javascript:show('release')" class="showbar" id="show-release">release</a> |
	<a href="javascript:show('mine')" class="showbar" id="show-mine">mine</a> |
	<a href="javascript:show('todo')" class="showbar" id="show-todo">my TODOs</a> |
	<a href="javascript:show('unassigned')" class="showbar" id="show-unassigned">unassigned</a>
	<br>
	<span id="showmutetext">include muted directories</span> <input type=checkbox id="showmute"></input>
{{else}}
	<a href="{{.Login}}">log in for personalization</a><br>
        show
        <a href="javascript:show('all')" class="showbar" id="show-all">all</a> |
	<a href="javascript:show('release')" class="showbar" id="show-release">release</a> |
	<a href="javascript:show('unassigned')" class="showbar" id="show-unassigned">unassigned</a>
{{end}}
| <span id="showcltext">show CLs</span> <input type=checkbox id="showcl" checked=checked></input>
| <span id="showissuetext">show issues</span> <input type=checkbox id="showissue" checked=checked></input>
</div>

<h1>Go development dashboard</h1>
<span>updated {{.Now}}</span><br>
<span class="howto"><a target="_blank" href="http://golang.org/s/go-dev-howto">how to use</a><br></span>
<br>

<table>
{{range .Dirs}}
	{{$dir := .Dir}}

	<tbody class="dir dir-{{$dir}} {{muted $dir}}">
	<tr class="dir dir-{{$dir}}">
		<td colspan=5>
			<b>{{.Dir}}</b> <span class="verb"><a class="dir-{{$dir}} mute" href="#">{{if muted $dir}}un{{end}}mute</a></span>

	{{range $ItemIndex, $Item := .Items}}
		{{with .Issue}}
			<tr class="item {{second $ItemIndex}}">
			<td class="highlight">
			<td class="issue id {{.Milestone | release}} "><a target="_blank" href="https://golang.org/issue/{{.Number}}">#{{.Number}}</a>
			<td class="author {{.Reporter | ghemail | mine}}">{{.Reporter | ghemail | short}}
			<td class="reviewer {{.Assignee | ghemail | mine}}">{{.Assignee | ghemail | short}}
			<td class="summary">{{.Title}}
				{{with .Milestone}}<span class="milestone {{. | release}}">{{.}}</span>{{end}}
				{{if not .Updated.IsZero}}
				<div class="extra">
					<span class="summary"><span class="age">last updated {{.Updated | since}}</span></span>
				</div>
				{{end}}
		{{end}}
		{{range .CLs}}
			<tr class="item {{if $Item.Issue}}nest{{end}} {{.NeedsReviewChanged | old}}">
			<td class="highlight">
			<td class="codereview id"><a target="_blank" href="https://golang.org/cl/{{.Number}}">CL {{.Number}}</a>
			<td class="author {{.Author | mine}} {{css "todo" (not .NeedsReview)}}">{{.Author}}
			<td class="reviewer {{.Reviewer | mine}} {{css "todo" .NeedsReview}}">
				<span id="reviewer-{{.Number}}">{{.Reviewer}}</span>
			<td class="summary">{{.Subject}}
				<span class="lgtmornot">{{range $r, $score := .Scores}}<span class="{{css "lgtm" (ge $score 0)}}{{css "notlgtm" (le $score 0)}}">{{$r | short}}{{if $score}} {{printf "%+d" $score}}{{end}}</span> {{end}}</span><br>
				<div class="extra">
				<span class="summary"><span class="age">last updated {{.NeedsReviewChanged | since}}</span>, {{if .NeedsReview}}<span class="needsreview">waiting for reviewer</span>{{else}}<span class="needswork">waiting for author</span>{{end}}</span><br>
				<span class="files">{{.Files | join " "}}</span>
				</div>
		{{end}}
	{{end}}
	</tbody>
{{end}}
</table>
</body>
</html>
`,

	"templates/release.html": `{{/*
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
*/}}
<!DOCTYPE html>
<html>
  <head>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">
      google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawCharts);
      function drawCharts() {
          var data = google.visualization.arrayToDataTable(ReleaseData);
          var options = {
            title: 'Go 1.{{.GoReleaseCycle}} Release Issues',
            isStacked: true,
            width: 1100, height: 450,
            vAxis: {minValue: 0},
            focusTarget: 'category',
            series: [
              // TODO: What if we change the set of labels? How to map these more intelligently?
              {color: '#008'}, // Early
              {color: '#44c'}, // Release
              {color: '#ccc'}, // Maybe
            ]
          };
          var chart = new google.visualization.AreaChart(document.getElementById('ReleaseDiv'));
          chart.draw(data, options);

          var data = google.visualization.arrayToDataTable(TriageData);
          var options = {
            title: 'Issue Progress',
            isStacked: true,
            width: 1100, height: 450,
            vAxis: {minValue: 0},
            focusTarget: 'category',
            series: [
              {color: '#c00'}, // Triage needed
              {color: '#cc0', lineDashStyle: [4, 4]}, // NeedsInvestigation
              {color: '#ee4', lineDashStyle: [4, 4]}, // NeedsInvestigation+Waiting
              {color: '#ff8', lineDashStyle: [4, 4]}, // NeedsInvestigation+Blocked
              {color: '#0a0', lineDashStyle: [4, 4]}, // NeedsDecision
              {color: '#4d4', lineDashStyle: [4, 4]}, // NeedsDecision+Waiting
              {color: '#8f8', lineDashStyle: [4, 4]}, // NeedsDecision+Blocked
              {color: '#00c', lineDashStyle: [4, 4]}, // NeedsFix
              {color: '#44e', lineDashStyle: [4, 4]}, // NeedsFix+Waiting
              {color: '#88f', lineDashStyle: [4, 4]}, // NeedsFix+Blocked
            ]
          };
          var chart = new google.visualization.AreaChart(document.getElementById('TriageDiv'));
          chart.draw(data, options);
      }
      function myDate(s) {
        return new Date(s)
      }
    </script>
    <script type="text/javascript" src="/stats/release/data.js?cycle={{.GoReleaseCycle}}"></script>

<style>
body { font-family: sans-serif; }
h1 { text-align: center; }
</style>
</head>

<body>

<h1>Go 1.{{.GoReleaseCycle}} Issue Tracker Dashboard</h1>

<div id="ReleaseDiv"></div>

<div id="TriageDiv"></div>

</body>
`,

	"static/dash.css": `h1 {
	font-size: 1.5em;
	margin-top: 0.1em;
	margin-bottom: 0.1em;
}
.loginbar {
	float: right;
}
a.showing {
	color: black;
	text-decoration: none;
	font-weight: bold;
}
table {
	border-spacing: 0;
	width: 100%;
}
tbody.hidden tr.dir {
	display: none;
}
tr.hidden {
	display: none;
}
tr.item td {
	border-top: 1px solid #ccc;
}
td {
	vertical-align: top;
	padding: 2px;
}
td.highlight {
	width: 1em;
}
tr.dir {
	background-color: #ffc;
}
tr.dir td {
	border-top: 1px solid black;
}
td.id {
	width: 7em;
}
tr.todo td.highlight {
	border-right: 5px solid blue;
}
td.author {
	width: 9em;
}
td.reviewer {
	width: 9em;
}
div.loginbar, span.howto, span.lgtmornot, span.summary, span.files {
	font-family: sans-serif;
	font-size: 80%;
}
div.loginbar {
	padding-bottom: 1em;
}
span.lgtmornot, span.summary, span.files {
	color: #777;
}
span.lgtm {
	color: #0c8;
	font-weight: bold;
}
span.notlgtm {
	color: #e00;
	font-weight: bold;
}
span.milestone {
	font-size: 60%;
}
span.milestone.release {
	background-color: #f99;
}
tr.old span.age {
	font-weight: bold;
	font-style: italic;
	color: #e00;
}
span.assignreviewer {
	font-weight: normal;
	font-size: 60%;
	font-family: sans-serif;
}
a.big {
	font-size: 150%;
	border: 1px solid blue;
}
td.mine {
	font-weight: bold;
}
tr.nest td.id {
	padding-left: 1em;
}
div.extra {
	margin-left: 1em;
}
span.verb {
	font-size: 60%;
	font-family: sans-serif;
}
`,

	"static/dash.js": `var mode = "all"

function readURL() {
	mode = window.location.hash.substr(1)
	if(mode.match(/\+muted/)) {
		$("#showmute").attr("checked","checked");
		mode = mode.replace(/\+muted/, "");
	}
	if(mode.match(/\+hidecl/)) {
		$("#showcl").attr("checked","");
		mode = mode.replace(/\+hidecl/, "");
	}
	if(mode.match(/\+hideissue/)) {
		$("#showissue").attr("checked","");
		mode = mode.replace(/\+hideissue/, "");
	}
}

function show(newmode) {
	mode = newmode
	redraw()
}

function redraw() {
	// Invariant: a tr containing a td with mine and todo classes itself has class todo.
	$("tr.todo").removeClass("todo");
	$("td.mine.todo").parent().addClass("todo");

	// Start with all items hidden.
	$("tr.item").addClass("hidden");
	$("tbody.dir").addClass("hidden");
	
	$("tr.item").removeClass("unhide");

	// Unhide the rows we want to show.
	var show;
	var showmute = $("#showmute").prop('checked');
	var showcl = $("#showcl").prop('checked');
	var showissue = $("#showissue").prop('checked');
	if(mode == "mine") {
		$("td.mine").parent().addClass("unhide");
	} else if(mode == "release") {
		$("td.release").parent().addClass("unhide");
	} else if(mode == "todo") {
		$("td.mine.todo").parent().addClass("unhide");
	} else if(mode == "unassigned") {
		var show = $("td.unassigned").parent();
		if(!showmute)
			show = show.not("tbody.muted tr.item");
		show.addClass("unhide");
	} else {
		mode = "all"
		if(showmute) {
			$("tr.item").addClass("unhide");
		} else {
			$("tbody:not(.muted) tr.item").addClass("unhide");
			$("td.mine").parent().addClass("unhide");
		}	
	}
	
	// But keep issues and/or CLs hidden.
	if(!showissue)
		$("td.issue").parent().removeClass("unhide");
	if(!showcl)
		$("td.codereview").parent().removeClass("unhide");

	$("tr.unhide").removeClass("hidden");	
	
	// Unhide the tbody containing the items we want to show.
	// Unhiding a tbody will unhide its directory row.
	$("tr.item:not(.hidden)").parent().removeClass("hidden");

	// Make the current mode look less like a link.
	$("a.showbar").removeClass("showing");
	$("#show-"+mode).addClass("showing");

	// Update window hash for bookmarking.
	var hash = mode
	if(showmute) {
		hash += "+muted"
	}
	if(!showcl) {
		hash += "+hidecl"
	}
	if(!showissue) {
		hash += "+hideissue"
	}
	window.location.hash = hash
}

function mute(ev, dir) {
	var dirclass = "dir-" + dir.replace(/\//g, "\\/").replace(/\./g, "\\.");
	
	var outer = $(ev.delegateTarget);
	var muting = outer.text() == "mute";
	var op = "";
	if(muting) {
		outer.text("muting...");
		op = "mute";
	} else {
		outer.text("unmuting...");
		op = "unmute";
	}
	console.log("Mute: " + dir)
	$.ajax({
		"type": "POST",
		"url": "/uiop",
		"data": {
			"dir": dir,
			"op": op
		},
		"success": function() {
			if(op == "mute") {
				$("tbody." + dirclass).addClass("muted");
				outer.text("unmute");
			} else {
				$("tbody." + dirclass).removeClass("muted");
				outer.text("mute");
			}
			redraw();
		},
		"error": function(xhr, status) {
			outer.text("failed: " + status)	
		}	
	})
}

function setreviewer(a, rev) {
	var clnumber = a.attr("id").replace("assign-", "");
	var who = rev.text();
	$.ajax({
		"type": "POST",
		"url": "/uiop",
		"data": {
			"cl": clnumber,
			"reviewer": who,
			"op": "reviewer"
		},
		"dataType": "text",
		"success": function(data) {
			a.text("edit");
			if(data.match(/^ERROR/)) {
				$("#err-" + clnumber).text(data);
				return;
			}
			rev.text(data);
		},
		"error": function(xhr, status) {
			a.text("failed: " + status)	
		}	
	})
}

$(document).ready(function() {
	// Define handler for mute links.
	$("a.mute").click(function(ev) {
		ev.preventDefault();
		var classes = $(ev.delegateTarget).attr("class").split(/\s+/);
		for(var i in classes) {
			var cl = classes[i];
			if(cl.substr(0,4) == "dir-") {
				mute(ev, cl.substr(4))
			}
		}
	})
	
	// Define handler for edit-reviewer links.
	$("a.assignreviewer").click(function(ev) {
		ev.preventDefault();
		var a = $(ev.delegateTarget);
		var revid = a.attr("id").replace("assign-", "reviewer-");
		var rev = $("#" + revid);
		if(a.text() == "edit") {
			rev.attr("contenteditable", "true");
			rev.focus();
			a.addClass("big");
			a.text("save");
		} else if(a.text() == "save") {
			a.text("saving...");
			a.removeClass("big");
			rev.attr("contenteditable", "false");
			setreviewer(a, rev);
		}
	})

	// Update mode from URL in browser and redraw.
	readURL();
	redraw();

	// Redraw any time the muting checkbox changes.
	$("#showmute").change(redraw);
	$("#showcl").change(redraw);
	$("#showissue").change(redraw);
})
`,

	"static/favicon.ico": "\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\x00\x00\x00\x10\b\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x01cIDATx\x9c\x9c\xd2=/\x04A\x1c\xc7\xf19\xf7\xc0\xb9x\x88\x87h\x14$\xd7H\xd0(\x88\x12q\x89B\xa1Pz\a\xde\x00ѨE#\x11oA\xc7\v\xa0\xf1\x90\b\x85DT\x14\xa2\x91\x9c\x87\xa3\xc2ݭ\xf5\x9d\xdb\xdf\xe6ְW\x98\xe4\x13\xb3\xb3\xe6w\xff\x9d\xff\xa4|S\x1b-\xa8\xc2>\xa6\x83%\x93\x80\x87\xb2i0\x12\n\xc8`X\x9b\xae\x90T`\x0e3\x18\xc4)N܀\xa6ȯMaZk\x9e\xaaZ\xc6\x02^q\x8cq7 \x15\x99\x97\xb59\xa1\xf9\x10\xd6ы\x17\x9c)\xe8\xcf\n>Q\xc1\a\u07b5f\xabx\xc4\x13\nX\xc3\\\\\x80\x1d\xf6\xf0\xbaщV\xbc)p\x16\x97hƄ\x1b\x10\x1e\xa2\x1d\xf3X½\x827Хs\xb0\x9fT\xc2>\xce\xe3\x02\xec\xa1\xe5t\x06\xbe*\xa8j\xbd\a\xcf\n\xf2\xe2\x02\xfe5\xc2.ؾg\x9cw\x15\xad{\xaaĞKZ\x95Շ\x1f\xe8\xc76\xf6p\x80\x15\x8c\xc1GA\xff\xb3\x8b-\xbf\xbe\xa7&\xecB\x11\xab\xb86A\xbf7M\xd0Z;\x060\x82E\xf4\xc5}BY\x1e\x14l\xdb\xf7\xa5\xbf\xf6\x8a\xe7q\xf3\xab|\xf3\xf3\x1e\x84g\x91\x8c\xbc;D\x16\xa3\xd81\xc1]h\x18Ў\x0eͳ\xaa\xe2\bm\xb8\xc0\xa4\x1b\xe0\xb61\xafO\xb83A\xef\xed\xad,i^\xd4\xf3mt\xc3w\x00\x00\x00\xff\xff\x01\xd2_\xe2Qy\xb7\xe9\x00\x00\x00\x00IEND\xaeB`\x82",

	"static/golang.ico": "\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xffϻy\xff²z\xff\xfe\xe1v\xff\xff\xdfw\xff\xff\xddw\xff\xff\xddw\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xff\xe0y\xfft\x8c\xc3\xff\xfb\xfc\xff\xff\xfb\xfc\xff\xfft\x8c\xc3\xff\xfe\xe1v\xff\xff\xddw\xff\xff\xddw\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xff\xdfw\xff\xfe\xe1v\xff\xfe\xe1v\xff\xa6\xa3\x89\xfft\x8c\xc3\xfft\x8c\xc3\xff\x8e\x99\xa6\xff\xfe\xe1v\xff\xff\xe1u\xff\xff\xdfx\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xff\xff\xff\x00TN8\xff\xfe\xe1v\xff\xf3\xd5t\xff\xff\xff\xff\xff\xff\xff\xff\xffȳr\xff\x1f #\xff\x1f #\xffȳr\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf3\xd5t\xff\xfe\xe1v\xffTN8\xff\xff\xff\xff\x00\xd7\xd9\xdd\xffTN8\xff\xfe\xe1v\xff\xe7\xe1\xd2\xff\xfb\xfe\xff\xff\x11\x13\x17\xff.,'\xff\xfe\xe1v\xff\xfe\xe1v\xff\xe7\xe1\xd2\xff\xfb\xfc\xff\xff\x11\x13\x17\xff.,'\xff\xfe\xe1v\xffTN8\xff\xd7\xd9\xdd\xffTN8\xffxh4\xffȧN\xff\xe7\xe1\xd2\xff\xff\xff\xff\xff\x11\x13\x17\xff.,'\xff\xfe\xe1v\xff\xfe\xe1v\xff\xe7\xe1\xd2\xff\xff\xff\xff\xff\x11\x13\x17\xff.,'\xffȧN\xffue7\xffTN8\xffTN8\xffȧN\xff\xaa\x92H\xffȳr\xff\xf5\xf6\xfb\xff\xf7\xfa\xff\xffȳr\xff\xfe\xe1v\xff\xfe\xe1v\xffȳr\xff\xff\xff\xff\xff\xff\xff\xff\xffȳr\xff\xaa\x92H\xffȧN\xffTN8\xff\xd7\xd9\xdd\xffTN8\xff{sN\xff\xaa\x92H\xffȧN\xffȧN\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xfe\xe1v\xff\xcc\xc1\x96\xffʿ\x8f\xff\xa5\x92T\xff{sN\xffTN8\xff\xd7\xd9\xdd\xff\xff\xff\xff\x00\xff\xff\xff\x00\xe1\xe2\xe5\xff\xa0\x9c\x8c\xff{sN\xff{sN\xffWN1\xffA:%\xffNE'\xffeW-\xff{sN\xff{sN\xff\xa0\x9c\x8c\xff\xe1\xe2\xe5\xff\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xea\xeb\xf1\xff\xdc\xdf\xe3\xff\xd7\xd9\xdd\xff\xea\xeb\xf1\xff\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",

	"static/index.html": `<!DOCTYPE html>
<html>
  <head>
    <title>Go Development Dashboard</title>
  </head>
<body>
<pre>
<a href="release">Go release dashboard</a>
<a href="cl">Go CL dashboard</a>
<a href="dash">Go development dashboard</a>
<a href="stats">Go project health dashboard</a>

<b>About the Dashboards</b>

These dashboards are generated by <a href="https://godoc.org/golang.org/x/build/devapp">golang.org/x/build/devapp</a>.

Issue information comes directly from GitHub.
To change something about an issue here, go to GitHub.

CL information comes directly from Gerrit.
To change something about a CL here, go to Gerrit.

The dashboard refreshes periodically.

<b>Release Dashboard</b>

The Go release dashboard shows
all open issues in the milestones for the upcoming release,
plus all open CLs mentioning those issues,
plus any other open CLs in the main repository.

The release dashboard is ordered primarily around issues in the
release milestone and the release-maybe milestone (for example,
Go1.5 and Go1.5Maybe). The maybe issues are shown in gray and
have [maybe] tags.

If a CL refers to a release issue in its description, the CL is shown on the
dashboard below that issue, with an arrow prefix (&#x2937;).
If a CL refers to multiple release issues, the CL is shown under each issue.

If a CL refers to no release issues, it is shown on its own, without an arrow.

<b>CL Dashboard</b>

The Go CL dashboard shows all open CLs.

The reviewer assignment for a CL is inferred from
activity on the CL. It can be wrong. To correct it,
reply to the CL with a comment starting with

	R=&lt;who&gt;

where &lt;who&gt; is the email address of the correct reviewer.
Past reviewers can be referred to without the email domain,
like in "git codereview mail -r", so R=rsc and R=rsc@golang.org
mean the same thing.

R=golang-dev makes the CL unassigned.

R=close removes the CL from the dashboard until the next
patch set is uploaded.

Giving a score of +2 or -2 makes you the reviewer of record,
regardless of R= lines. If that's wrong, remove your score.

If the CL author has made a comment or uploaded a patch set
more recently than the assigned reviewer (or if there is no reviewer),
the CL is "waiting for reviewer". Otherwise it is "waiting for author".
The person being waited for is shown in bold.

The days counts shown are the time since the last change in
"waiting for" status and the time since the CL was first uploaded.
If a CL has been waiting for reviewer for 10 or more days, the
reviewer name and day count are displayed red and underlined.

If a CL mentions issues, those issues are listed at the end of the
CL description as links.
</body>
</html>
`,

	"static/stats.html": `<!DOCTYPE html>
<html>
<head>
<title>Go Project Statistics</title>
</head>
<body>
<h1># of issues opened by month</h1>
<img src="/stats/svg?column=CreatedMonth;yscale=log">
<h1># of open issues over time</h1>
<img src="/stats/svg?pivot=opencount;group=release">
<h1>Age of open issues</h1>
<img src="/stats/svg?filter=open;column=Open;agg=bin">
<h1>Median close time for issues opened per day</h1>
<img src="/stats/svg?filter=closed;column=Created;agg=percentile;yscale=lin;ymax=7776000000000000">
</body>
</html>
`,

	"static/svg.html": `<!DOCTYPE html>
<html>
<body>
/stats/svg serves various graphs of issue statistics. Some of the supported query parameters are:

<ul>
  <li><code>xscale</code>
    <ul>
      <li><code>xscale=log</code> - log scale</li>
      <li><code>xscale=lin</code> - linear scale.</li>
  </ul></li>
  <li><code>x{min,max}</code> - set min and max for scale. Only take effect if xscale is also supplied.</li>
  <li><code>y{scale,min,max}</code> - same as x* but for y axis</li>
  <li><code>pivot</code> - predefined graphs
    <ul>
      <li><code>pivot=opencount</code> - plot number of open issues over time. With <code>group=release</code> plots the number of open issues by release over time.</li>
      <li>Unspecified - plot number of issues by bucket
        <ul>
          <li><code>filter</code>
            <ul>
              <li><code>filter=open</code> - only open issues</li>
              <li><code>filter=closed</code> - only closed issues</li>
            </ul>
          </li>
          <li><code>column</code> - column to bucket issues by
            <ul>
              <li><code>column={Created,Closed,Updated}{,Day,Week,Month,Year}</code> - time, day, week, month, or year the issue was created, closed, or updated</li>
              <li><code>column=UpdateAge</code> - time since issue was last updated</li>
            </ul>
          </li>
          <li><code>agg</code> - how to aggregate issues
            <ul>
              <li><code>agg=count</code> or unspecified - count of issues for each distinct value of <code>column</code></li>
              <li><code>agg=ecdf</code> - CDF of values</li>
              <li><code>agg=bin</code> - automatically chosen histogram bins</li>
              <li><code>agg=density</code> - best fit PDF of values</li>
              <li><code>agg=percentile</code> - plots percentiles of a second column (currently hardcoded to <code>Open</code>), over a moving window (defaulting to 30 days)
                <ul>
                  <li><code>window=24h</code> - time.Duration over which to window percentiles</li>
                </ul>
              </li>
            </ul>
        </ul>
      </li>
    </ul>
  </li>
</ul>

</body>
</html>
`,
}
