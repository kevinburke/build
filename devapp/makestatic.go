// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

/*
 * Command makestatic reads a set of files and writes a Go source file to "static.go"
 * that declares a map of string constants containing contents of the input files.
 * It is intended to be invoked via "go generate" (directive in "gen.go").
 *
 * This is mostly copied from the file of the same name in
 * golang.org/x/tools/godoc.
 */
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"time"
	"unicode/utf8"
)

var files = []string{
	"templates/dash.html",
	"templates/release.html",
	"static/dash.css",
	"static/dash.js",
	"static/favicon.ico",
	"static/golang.ico",
	"static/index.html",
	"static/stats.html",
	"static/svg.html",
}

func main() {
	if err := makestatic(files, "zstatic.go", "devapp"); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func makestatic(files []string, filename string, pkg string) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%v\n\n%v\n\npackage %s\n\n", license, warning, pkg)
	fmt.Fprintf(buf, "var Files = map[string]string{\n")
	for _, fn := range files {
		b, err := ioutil.ReadFile(fn)
		if err != nil {
			return err
		}
		fmt.Fprintf(buf, "\t%q: ", fn)
		if utf8.Valid(b) {
			fmt.Fprintf(buf, "`%s`", sanitize(b))
		} else {
			fmt.Fprintf(buf, "%q", b)
		}
		fmt.Fprintln(buf, ",\n")
	}
	fmt.Fprintln(buf, "}")
	fmtbytes, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	_, err = f.Write(fmtbytes)
	return err
}

// sanitize prepares a valid UTF-8 string as a raw string constant.
func sanitize(b []byte) []byte {
	// Replace ` with `+"`"+`
	b = bytes.Replace(b, []byte("`"), []byte("`+\"`\"+`"), -1)

	// Replace BOM with `+"\xEF\xBB\xBF"+`
	// (A BOM is valid UTF-8 but not permitted in Go source files.
	// I wouldn't bother handling this, but for some insane reason
	// jquery.js has a BOM somewhere in the middle.)
	return bytes.Replace(b, []byte("\xEF\xBB\xBF"), []byte("`+\"\\xEF\\xBB\\xBF\"+`"), -1)
}

const warning = `// Code generated by makestatic via "go generate"; DO NOT EDIT.`

var license = fmt.Sprintf(`// Copyright %d The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.`, time.Now().UTC().Year())
